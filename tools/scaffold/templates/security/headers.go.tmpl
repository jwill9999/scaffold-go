package security

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

type SecurityHeadersConfig struct {
	// Content Security Policy
	CSP string

	// Cross-Origin Embedder Policy
	COEP string

	// Cross-Origin Opener Policy
	COOP string

	// Cross-Origin Resource Policy
	CORP string

	// Permissions Policy
	PermissionsPolicy string

	// Referrer Policy
	ReferrerPolicy string

	// Strict Transport Security
	HSTS string

	// X-Content-Type-Options
	XContentTypeOptions string

	// X-Frame-Options
	XFrameOptions string

	// X-XSS-Protection
	XXSSProtection string
}

var DefaultSecurityHeadersConfig = SecurityHeadersConfig{
	CSP:                "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self'",
	COEP:              "require-corp",
	COOP:              "same-origin",
	CORP:              "same-origin",
	PermissionsPolicy: "accelerometer=(), camera=(), geolocation=(), gyroscope=(), magnetometer=(), microphone=(), payment=(), usb=()",
	ReferrerPolicy:    "strict-origin-when-cross-origin",
	HSTS:              "max-age=31536000; includeSubDomains",
	XContentTypeOptions: "nosniff",
	XFrameOptions:     "DENY",
	XXSSProtection:    "1; mode=block",
}

func SecurityHeaders(config SecurityHeadersConfig) gin.HandlerFunc {
	return func(c *gin.Context) {
		// Set security headers
		if config.CSP != "" {
			c.Header("Content-Security-Policy", config.CSP)
		}
		if config.COEP != "" {
			c.Header("Cross-Origin-Embedder-Policy", config.COEP)
		}
		if config.COOP != "" {
			c.Header("Cross-Origin-Opener-Policy", config.COOP)
		}
		if config.CORP != "" {
			c.Header("Cross-Origin-Resource-Policy", config.CORP)
		}
		if config.PermissionsPolicy != "" {
			c.Header("Permissions-Policy", config.PermissionsPolicy)
		}
		if config.ReferrerPolicy != "" {
			c.Header("Referrer-Policy", config.ReferrerPolicy)
		}
		if config.HSTS != "" {
			c.Header("Strict-Transport-Security", config.HSTS)
		}
		if config.XContentTypeOptions != "" {
			c.Header("X-Content-Type-Options", config.XContentTypeOptions)
		}
		if config.XFrameOptions != "" {
			c.Header("X-Frame-Options", config.XFrameOptions)
		}
		if config.XXSSProtection != "" {
			c.Header("X-XSS-Protection", config.XXSSProtection)
		}

		// Remove server header
		c.Header("Server", "")

		c.Next()
	}
}

// Helper function to generate CSP header
func GenerateCSP(directives map[string][]string) string {
	csp := ""
	for directive, sources := range directives {
		if len(sources) > 0 {
			csp += directive + " " + joinSources(sources) + "; "
		}
	}
	return csp
}

func joinSources(sources []string) string {
	result := ""
	for i, source := range sources {
		if i > 0 {
			result += " "
		}
		result += source
	}
	return result
}

// Example CSP configuration
var ExampleCSP = map[string][]string{
	"default-src": {"'self'"},
	"script-src":  {"'self'", "'unsafe-inline'", "'unsafe-eval'"},
	"style-src":   {"'self'", "'unsafe-inline'"},
	"img-src":     {"'self'", "data:"},
	"font-src":    {"'self'"},
	"connect-src": {"'self'"},
} 