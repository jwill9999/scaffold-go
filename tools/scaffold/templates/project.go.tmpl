// Package templates provides scaffolding templates for the project
package templates

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"text/template"
)

// ProjectTemplate represents the structure for a new project
type ProjectTemplate struct {
	Name        string
	Module      string
	Description string
}

// Generate creates a new project from the template
func (p *ProjectTemplate) Generate(destPath string) error {
	dirs := []string{
		"cmd/api",
		"internal/config",
		"internal/handlers",
		"internal/middleware",
		"internal/models",
		"internal/repository",
		"internal/services",
		"internal/storage",
		"pkg/constants",
		"pkg/errors",
		"migrations",
		"scripts",
		"tests/unit",
		"tests/integration",
		"tests/e2e",
	}

	// Create directory structure
	for _, dir := range dirs {
		if err := os.MkdirAll(filepath.Join(destPath, dir), 0755); err != nil {
			return fmt.Errorf("failed to create directory %s: %w", dir, err)
		}
	}

	// Create base files
	files := map[string]string{
		"go.mod":        goModTemplate,
		"README.md":     readmeTemplate,
		"Makefile":      makefileTemplate,
		"Dockerfile":    dockerfileTemplate,
		".gitignore":    gitignoreTemplate,
		".env.example": envTemplate,
	}

	for filename, content := range files {
		tmpl, err := template.New(filename).Parse(content)
		if err != nil {
			return fmt.Errorf("failed to parse template %s: %w", filename, err)
		}

		var buf bytes.Buffer
		if err := tmpl.Execute(&buf, p); err != nil {
			return fmt.Errorf("failed to execute template %s: %w", filename, err)
		}

		if err := os.WriteFile(filepath.Join(destPath, filename), buf.Bytes(), 0644); err != nil {
			return fmt.Errorf("failed to write file %s: %w", filename, err)
		}
	}

	return nil
}

const goModTemplate = `module {{.Module}}

go 1.21

require (
	github.com/gin-gonic/gin v1.9.1
	github.com/golang-jwt/jwt/v5 v5.0.0
	github.com/spf13/viper v1.16.0
	go.uber.org/zap v1.24.0
	golang.org/x/oauth2 v0.13.0
	gorm.io/driver/postgres v1.5.2
	gorm.io/gorm v1.25.4
)
`

const readmeTemplate = `# {{.Name}}

{{.Description}}

## Getting Started

### Prerequisites
- Go 1.21+
- Docker
- Make

### Development Setup
1. Copy .env.example to .env and configure
2. Run make setup
3. Run make dev

### Testing
- make test        # Run all tests
- make test-unit   # Run unit tests
- make test-int    # Run integration tests
- make test-e2e    # Run end-to-end tests

### API Documentation
- Swagger UI: http://localhost:8080/swagger/index.html
- ReDoc: http://localhost:8080/docs

## Project Structure
\`\`\`
.
├── cmd/api           # Application entrypoints
├── internal/         # Private application code
│   ├── config       # Configuration
│   ├── handlers     # HTTP handlers
│   ├── middleware   # HTTP middleware
│   ├── models       # Domain models
│   ├── repository   # Data access layer
│   ├── services     # Business logic
│   └── storage      # Database implementations
├── pkg/             # Public libraries
│   ├── constants    # Shared constants
│   └── errors       # Error definitions
├── migrations/      # Database migrations
├── scripts/         # Build and deployment scripts
└── tests/          # Test suites
    ├── unit        # Unit tests
    ├── integration # Integration tests
    └── e2e         # End-to-end tests
\`\`\`
`

const makefileTemplate = `# Build variables
BINARY_NAME={{.Name}}
VERSION=1.0.0
BUILD_DIR=build

# Go variables
GOCMD=go
GOBUILD=$(GOCMD) build
GOTEST=$(GOCMD) test
GOMOD=$(GOCMD) mod
GOVET=$(GOCMD) vet
GOCOVER=$(GOCMD) tool cover

.PHONY: all build clean test lint setup dev

all: clean build test

build:
	$(GOBUILD) -o $(BUILD_DIR)/$(BINARY_NAME) -v ./cmd/api

clean:
	rm -rf $(BUILD_DIR)

test:
	$(GOTEST) -v ./...

test-unit:
	$(GOTEST) -v ./tests/unit/...

test-int:
	$(GOTEST) -v ./tests/integration/...

test-e2e:
	$(GOTEST) -v ./tests/e2e/...

lint:
	golangci-lint run

setup:
	$(GOMOD) download
	$(GOMOD) verify
	cp .env.example .env

dev:
	air -c .air.toml
`

const dockerfileTemplate = `# Build stage
FROM golang:1.21-alpine AS builder

WORKDIR /app
COPY . .
RUN go mod download
RUN CGO_ENABLED=0 GOOS=linux go build -o api ./cmd/api

# Final stage
FROM alpine:latest

WORKDIR /app
COPY --from=builder /app/api .
COPY --from=builder /app/config ./config

EXPOSE 8080
CMD ["./api"]
`

const gitignoreTemplate = `.env
*.log
.DS_Store
/build
/vendor
/coverage.out
.idea/
.vscode/
*.swp
*.swo
`

const envTemplate = `# Application
APP_NAME={{.Name}}
APP_ENV=development
APP_PORT=8080

# Database
DB_HOST=localhost
DB_PORT=5432
DB_NAME={{.Name}}
DB_USER=postgres
DB_PASSWORD=postgres

# Redis
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=

# JWT
JWT_SECRET=your-secret-key
JWT_EXPIRATION=24h

# OAuth2
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=
GOOGLE_REDIRECT_URL=http://localhost:8080/auth/google/callback

# Logging
LOG_LEVEL=debug
LOG_FORMAT=console
` 