package server

import (
	"context"
	"fmt"
	"net/http"

	"{{.Module}}/internal/config"
	"{{.Module}}/internal/core/middleware"
	"{{.Module}}/pkg/logger"
	{{if .Features.Metrics}}"{{.Module}}/pkg/metrics"{{end}}
	{{if .Features.Tracing}}"{{.Module}}/pkg/tracing"{{end}}

	"github.com/gin-gonic/gin"
)

type Server struct {
	router     *gin.Engine
	config     *config.Config
	logger     *logger.Logger
	{{if .Features.Metrics}}metrics    *metrics.Client{{end}}
	{{if .Features.Tracing}}tracer     *tracing.Client{{end}}
	httpServer *http.Server
}

func NewServer(cfg *config.Config, logger *logger.Logger) (*Server, error) {
	router := gin.New()

	// Initialize middleware
	router.Use(
		gin.Recovery(),
		middleware.RequestID(),
		middleware.Logger(logger),
		{{if .Features.Metrics}}middleware.Metrics(),{{end}}
		{{if .Features.Tracing}}middleware.Tracing(),{{end}}
	)

	{{if .Features.Metrics}}
	// Initialize metrics
	metricsClient, err := metrics.NewClient(cfg.Metrics)
	if err != nil {
		return nil, fmt.Errorf("failed to initialize metrics: %w", err)
	}
	{{end}}

	{{if .Features.Tracing}}
	// Initialize tracing
	tracingClient, err := tracing.NewClient(cfg.Tracing)
	if err != nil {
		return nil, fmt.Errorf("failed to initialize tracing: %w", err)
	}
	{{end}}

	server := &Server{
		router: router,
		config: cfg,
		logger: logger,
		{{if .Features.Metrics}}metrics: metricsClient,{{end}}
		{{if .Features.Tracing}}tracer: tracingClient,{{end}}
		httpServer: &http.Server{
			Addr:    fmt.Sprintf(":%s", cfg.Server.Port),
			Handler: router,
		},
	}

	// Register routes
	server.registerRoutes()

	return server, nil
}

func (s *Server) registerRoutes() {
	// Health check
	s.router.GET("/health", s.handleHealth())

	{{if .Features.Metrics}}
	// Metrics endpoint
	s.router.GET("/metrics", gin.WrapH(s.metrics.Handler()))
	{{end}}

	// API routes
	api := s.router.Group("/api/v1")
	{
		// TODO: Register your API routes here
		// Example:
		// users := api.Group("/users")
		// {
		//     users.POST("/", s.handleCreateUser())
		//     users.GET("/:id", s.handleGetUser())
		// }
	}
}

func (s *Server) handleHealth() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"status": "healthy",
			"version": "1.0.0", // TODO: Make this configurable
		})
	}
}

func (s *Server) Start() error {
	return s.httpServer.ListenAndServe()
}

func (s *Server) Shutdown(ctx context.Context) error {
	{{if .Features.Metrics}}s.metrics.Close(){{end}}
	{{if .Features.Tracing}}s.tracer.Close(){{end}}
	return s.httpServer.Shutdown(ctx)
} 