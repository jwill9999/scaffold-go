package cache

import (
	"context"
	"sync"
	"time"
)

// MemoryCache implements the Cache interface using in-memory storage
type MemoryCache struct {
	items map[string]*cacheItem
	mu    sync.RWMutex
}

type cacheItem struct {
	value      interface{}
	expiration time.Time
}

// NewMemoryCache creates a new in-memory cache instance
func NewMemoryCache() *MemoryCache {
	return &MemoryCache{
		items: make(map[string]*cacheItem),
	}
}

// Set stores a value in memory with the specified TTL
func (c *MemoryCache) Set(ctx context.Context, key string, value interface{}, ttl time.Duration) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	c.items[key] = &cacheItem{
		value:      value,
		expiration: time.Now().Add(ttl),
	}
	return nil
}

// Get retrieves a value from memory
func (c *MemoryCache) Get(ctx context.Context, key string, value interface{}) error {
	c.mu.RLock()
	item, exists := c.items[key]
	c.mu.RUnlock()

	if !exists {
		return ErrCacheMiss
	}

	if time.Now().After(item.expiration) {
		c.Delete(ctx, key)
		return ErrCacheMiss
	}

	// Type assertion to set the value
	if v, ok := item.value.(interface{}); ok {
		value = v
		return nil
	}
	return ErrCacheMiss
}

// Delete removes a value from memory
func (c *MemoryCache) Delete(ctx context.Context, key string) error {
	c.mu.Lock()
	defer c.mu.Unlock()
	delete(c.items, key)
	return nil
}

// Exists checks if a key exists in memory
func (c *MemoryCache) Exists(ctx context.Context, key string) (bool, error) {
	c.mu.RLock()
	item, exists := c.items[key]
	c.mu.RUnlock()

	if !exists {
		return false, nil
	}

	if time.Now().After(item.expiration) {
		c.Delete(ctx, key)
		return false, nil
	}

	return true, nil
}

// Increment increases the value of a key by the specified amount
func (c *MemoryCache) Increment(ctx context.Context, key string, value int64) (int64, error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	item, exists := c.items[key]
	if !exists {
		c.items[key] = &cacheItem{
			value:      value,
			expiration: time.Now().Add(24 * time.Hour), // Default TTL
		}
		return value, nil
	}

	if time.Now().After(item.expiration) {
		c.items[key] = &cacheItem{
			value:      value,
			expiration: time.Now().Add(24 * time.Hour),
		}
		return value, nil
	}

	if v, ok := item.value.(int64); ok {
		newValue := v + value
		item.value = newValue
		return newValue, nil
	}
	return 0, ErrCacheMiss
}

// Decrement decreases the value of a key by the specified amount
func (c *MemoryCache) Decrement(ctx context.Context, key string, value int64) (int64, error) {
	return c.Increment(ctx, key, -value)
}

// SetNX sets a value only if the key does not exist
func (c *MemoryCache) SetNX(ctx context.Context, key string, value interface{}, ttl time.Duration) (bool, error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	if _, exists := c.items[key]; exists {
		return false, nil
	}

	c.items[key] = &cacheItem{
		value:      value,
		expiration: time.Now().Add(ttl),
	}
	return true, nil
}

// GetSet gets the current value and sets a new value atomically
func (c *MemoryCache) GetSet(ctx context.Context, key string, value interface{}, ttl time.Duration) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	item, exists := c.items[key]
	if exists && !time.Now().After(item.expiration) {
		if v, ok := item.value.(interface{}); ok {
			value = v
		}
	}

	c.items[key] = &cacheItem{
		value:      value,
		expiration: time.Now().Add(ttl),
	}
	return nil
}

// Close cleans up the memory cache
func (c *MemoryCache) Close() error {
	c.mu.Lock()
	defer c.mu.Unlock()
	c.items = make(map[string]*cacheItem)
	return nil
} 