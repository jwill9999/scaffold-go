package cache

import (
	"context"
	"errors"
	"time"
)

// Cache errors
var (
	ErrCacheMiss = errors.New("cache miss")
)

// Cache defines the interface for cache operations
type Cache interface {
	// Set stores a value in the cache with the specified TTL
	Set(ctx context.Context, key string, value interface{}, ttl time.Duration) error

	// Get retrieves a value from the cache
	Get(ctx context.Context, key string, value interface{}) error

	// Delete removes a value from the cache
	Delete(ctx context.Context, key string) error

	// Exists checks if a key exists in the cache
	Exists(ctx context.Context, key string) (bool, error)

	// Increment increases the value of a key by the specified amount
	Increment(ctx context.Context, key string, value int64) (int64, error)

	// Decrement decreases the value of a key by the specified amount
	Decrement(ctx context.Context, key string, value int64) (int64, error)

	// SetNX sets a value only if the key does not exist
	SetNX(ctx context.Context, key string, value interface{}, ttl time.Duration) (bool, error)

	// GetSet gets the current value and sets a new value atomically
	GetSet(ctx context.Context, key string, value interface{}, ttl time.Duration) error

	// Close closes the cache connection
	Close() error
} 