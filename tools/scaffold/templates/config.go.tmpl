package config

import (
	"fmt"
	"os"
	"strconv"

	"github.com/spf13/viper"
)

// Config holds all configuration for the application
type Config struct {
	Server   ServerConfig
	LogLevel string
}

// ServerConfig holds server-specific configuration
type ServerConfig struct {
	Port    int
	Timeout int // in seconds
}

// LoadConfig loads configuration from environment variables and config files
func LoadConfig() (*Config, error) {
	v := viper.New()
	
	// Set defaults
	v.SetDefault("server.port", 8080)
	v.SetDefault("server.timeout", 30)
	v.SetDefault("log_level", "info")
	
	// Read from environment variables
	v.AutomaticEnv()
	v.SetEnvPrefix("APP")
	
	// Try to read from config file if it exists
	v.SetConfigName("config")
	v.SetConfigType("yaml")
	v.AddConfigPath(".")
	v.AddConfigPath("./config")
	
	if err := v.ReadInConfig(); err != nil {
		// It's okay if config file doesn't exist
		if _, ok := err.(viper.ConfigFileNotFoundError); !ok {
			return nil, fmt.Errorf("failed to read config file: %w", err)
		}
	}
	
	// Override with environment variables if they exist
	if port := os.Getenv("PORT"); port != "" {
		portInt, err := strconv.Atoi(port)
		if err == nil {
			v.Set("server.port", portInt)
		}
	}
	
	// Build config struct
	var config Config
	if err := v.Unmarshal(&config); err != nil {
		return nil, fmt.Errorf("failed to unmarshal config: %w", err)
	}
	
	return &config, nil
} 